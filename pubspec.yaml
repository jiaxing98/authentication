name: authentication
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.6.0

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  flutter_localizations:
    sdk: flutter

  # Provides internationalization and localization facilities, including message translation,
  # plurals and genders, date/number formatting and parsing, and bidirectional text.
  # https://pub.dev/packages/intl
  # flutter gen-l10n
  intl: ^0.19.0

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

  # Small, easy to use and extensible logger which prints beautiful logs.
  logger: ^2.5.0

  # Contains utility functions and classes in the style of dart:collection to make working with collections easier.
  # https://pub.dev/packages/collection
  collection: ^1.18.0

  # This is a simple Service Locator for Dart and Flutter projects.
  # https://pub.dev/packages/get_it
  get_it: ^8.0.1

  # A declarative routing package for Flutter that uses the Router API to provide a convenient, url-based API for navigating between different screens.
  # https://pub.dev/packages/go_router
  go_router: ^14.3.0

  # Being able to compare objects in Dart often involves having to override the == operator as well as hashCode.
  # https://pub.dev/packages/equatable
  equatable: ^2.0.5

  # A dart package that helps implement the BLoC pattern.
  # https://pub.dev/packages/bloc
  bloc: ^9.0.0

  # Widgets that make it easy to integrate blocs and cubits into Flutter.
  # https://pub.dev/packages/flutter_bloc
  flutter_bloc: ^9.0.0

  # This Flutter plugin provides means to perform local, on-device authentication of the user.
  # https://pub.dev/packages/local_auth
  local_auth: ^2.3.0

  # Flutter plugin for reading and writing simple key-value pairs. Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  # https://pub.dev/packages/shared_preferences
  shared_preferences: ^2.2.3

  # A set of high-level APIs over PointyCastle for two-way cryptography.
  # https://pub.dev/packages/encrypt
  encrypt: ^5.0.3

  # Defines the annotations used by json_serializable to create code for JSON serialization and deserialization.
  # https://pub.dev/packages/json_annotation
  json_annotation: ^4.9.0

  # Drift is a reactive persistence library for Flutter and Dart, built on top of SQLite.
  # https://pub.dev/packages/drift
  drift: ^2.24.0

  # A Flutter plugin for finding commonly used locations on the filesystem.
  # https://pub.dev/packages/path_provider
  path_provider: ^2.1.1

  # A comprehensive, cross-platform path manipulation library for Dart.
  # https://pub.dev/packages/path
  path: ^1.8.3

  # Simple, fast generation of RFC4122 and RFC9562 UUIDs.
  # https://pub.dev/packages/uuid
  uuid: ^4.5.1

  # A unified form representation in Dart. Formz aims to simplify form representation and validation in a generic way.
  # https://pub.dev/packages/formz
  formz: ^0.7.0

  # Use FlexColorScheme to make beautiful Flutter Material Design themes.
  # https://pub.dev/packages/flex_color_scheme
  flex_color_scheme: ^8.0.2

  # Overlay Loading Indicator
  # https://pub.dev/packages/loader_overlay
  loader_overlay: ^4.0.3

  # A collection of loading indicators animated with flutter.
  # https://pub.dev/packages/flutter_spinkit
  flutter_spinkit: ^5.2.1

  # A Flutter package to use fonts from fonts.google.com.
  # https://pub.dev/packages/google_fonts
  google_fonts: ^6.2.1

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0

  # Provides Dart Build System builders for handling JSON.
  # https://pub.dev/packages/json_serializable
  json_serializable: ^6.9.3

  # Turns your Table classes from drift into database code.
  # https://pub.dev/packages/drift_dev
  drift_dev: ^2.24.0

  # The build_runner package provides a concrete way of generating files using Dart code.
  # https://pub.dev/packages/build_runner
  build_runner: ^2.4.14

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # Enables code generation for l10n
  generate: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
